package core

// Code generated by sketch/scripts/bind-module-data DO NOT EDIT
//
// Sources:
// core.skt

const SketchCode = `
; core.skt
(defmacro
  defn
  (fn
    "defn defines a function. It's equivalent to calling (def <name> (fn <...>))"
    (name a b & c)
    (if
      (empty? c)
      (quasiquote (def (unquote name) (fn (unquote a) (unquote b))))
      (quasiquote
        (def (unquote name) (fn (unquote a) (unquote b) (unquote (first c))))))))

(defmacro
  cond
  (fn
    "cond takes a list of lists, and evaluates each list as a pair.
    It checks whether the first of the pair evaluates to true, and if so,
    returns the result of the second. If false, it continues down the pairs of
    arguments."
    (& xs)
    (if
      (> (count xs) 0)
      (let
        ((pair (first xs))) ; (prn pair)
        (list
          (quote if)
          (first pair)
          (nth pair 1)
          (cons (quote cond) (rest xs)))))))

(defn
  not
  "not returns false if the argument is truthy, else true"
  (x)
  (if x false true))

(defn load-file (f) (eval (read-string (+ "(do " (slurp f) "
nil)"))))
`
