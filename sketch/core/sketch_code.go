package core

// Code generated by sketch/scripts/bind-module-data DO NOT EDIT
//
// Sources:
// core.skt

const SketchCode = `
; core.skt
(defmacro
  defn
  (fn
    "defn defines a function. It's equivalent to calling (def <name> (fn <...>))"
    (name a b & c)
    (if
      (empty? c)
      (quasiquote (def (unquote name) (fn (unquote a) (unquote b))))
      (quasiquote
        (def (unquote name) (fn (unquote a) (unquote b) (unquote (first c))))))))

(defmacro
  cond
  (fn
    "cond takes an even number of arguments, and evaluates each two as a pair.
    It checks whether the first of the pair evaluates to true, and if so,
    returns the result of the second. If false, it continues down the pairs of
    arguments."
    (& xs)
    (if
      (> (count xs) 0)
      (list
        (quote if)
        (first xs)
        (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond"))
        (cons (quote cond) (rest (rest xs)))))))

(defn
  not
  "not returns false if the argument is truthy, else true"
  (x)
  (if x false true))

(defn load-file (f) (eval (read-string (+ "(do " (slurp f) "\nnil)"))))
`
