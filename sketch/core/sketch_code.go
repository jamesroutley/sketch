package core

// Code generated by sketch/scripts/bind-module-data DO NOT EDIT
//
// Sources:
// core.skt

const SketchCode = `
; core.skt
(defmacro
  defn
  (fn
    "defn defines a function. It's equivalent to calling (def <name> (fn <...>))"
    (name a b & c)
    (if
      (empty? c)
      (quasiquote (def (unquote name) (fn (unquote a) (unquote b))))
      (quasiquote
        (def (unquote name) (fn (unquote a) (unquote b) (unquote (first c))))))))

(defmacro
  cond
  (fn
    "cond takes a list of lists, and evaluates each list as a pair.
    It checks whether the first of the pair evaluates to true, and if so,
    returns the result of the second. If false, it continues down the pairs of
    arguments."
    (& xs)
    (if
      (> (count xs) 0)
      (let
        ((pair (first xs))) ; (prn pair)
        (list
          (quote if)
          (first pair)
          (nth pair 1)
          (cons (quote cond) (rest xs)))))))

(defn
  not
  "not returns false if the argument is truthy, else true"
  (x)
  (if x false true))

(defn load-file (f) (eval (read-string (+ "(do " (slurp f) "
nil)"))))

(defn
  reduce
  (function collection)
  (let
    ((initial (function (first collection) (nth collection 1))))
    (fold-left function initial (rest (rest collection)))))

(defn
  max
  (collection)
  (if
    (= (length collection) 1)
    (first collection)
    (reduce (fn (a b) (if (> a b) a b)) collection)))

(defn
  min
  (collection)
  (if
    (= (length collection) 1)
    (first collection)
    (reduce (fn (a b) (if (< a b) a b)) collection)))

(defn
  hashset
  (& items)
  (apply hashmap (flatten (map (fn (item) (list item true)) items))))

(defn hashset-get (set key) (hashmap-get set key false))

(defn hashset-add (set key) (hashmap-set set key true))

(defn add1 (n) (+ n 1))

(defn sub1 (n) (- n 1))

(defn
  for-each
  (procedure collection)
  (if
    (empty? collection)
    nil
    (do (procedure (first collection)) (for-each procedure (rest collection)))))

(defn second (l) (nth l 1))

(defn
  dedupe
  "Removes duplicate items from a list. It does this by converting it to a
    hashmap and back, so the list can only contain items that can be a hashmap
    key"
  (l)
  (hashmap-keys (apply hashset l)))

(defn
  reverse
  "Returns a new list, with the items in reverse order"
  (lst)
  (let
    ((reverse-recur (fn (l reversed) (if (empty? l) reversed (reverse-recur (rest l) (cons (first l) reversed))))))
    (reverse-recur lst (list))))
`
